require 'nn'
local model = {}
-- warning: module 'data [type Data]' not found
table.insert(model, {'conv1_1', nn.SpatialConvolution(3, 64, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu1_1', nn.ReLU(true)})
table.insert(model, {'pool1', nn.SpatialMaxPooling(2, 2, 2, 2, 0, 0):ceil()})
table.insert(model, {'conv2_1', nn.SpatialConvolution(64, 128, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu2_1', nn.ReLU(true)})
table.insert(model, {'pool2', nn.SpatialMaxPooling(2, 2, 2, 2, 0, 0):ceil()})
table.insert(model, {'conv3_1', nn.SpatialConvolution(128, 256, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu3_1', nn.ReLU(true)})
table.insert(model, {'conv3_2', nn.SpatialConvolution(256, 256, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu3_2', nn.ReLU(true)})
table.insert(model, {'pool3', nn.SpatialMaxPooling(2, 2, 2, 2, 0, 0):ceil()})
table.insert(model, {'conv4_1', nn.SpatialConvolution(256, 512, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu4_1', nn.ReLU(true)})
table.insert(model, {'conv4_2', nn.SpatialConvolution(512, 512, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu4_2', nn.ReLU(true)})
table.insert(model, {'pool4', nn.SpatialMaxPooling(2, 2, 2, 2, 0, 0):ceil()})
table.insert(model, {'conv5_1', nn.SpatialConvolution(512, 512, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu5_1', nn.ReLU(true)})
table.insert(model, {'conv5_2', nn.SpatialConvolution(512, 512, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu5_2', nn.ReLU(true)})
table.insert(model, {'pool5', nn.SpatialMaxPooling(2, 2, 2, 2, 0, 0):ceil()})
table.insert(model, {'conv6_1', nn.SpatialConvolution(512, 1024, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu6_1', nn.ReLU(true)})
table.insert(model, {'conv6_2', nn.SpatialConvolution(1024, 1024, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu6_2', nn.ReLU(true)})
table.insert(model, {'conv6_3', nn.SpatialConvolution(1024, 1024, 3, 3, 1, 1, 1, 1)})
table.insert(model, {'relu6_3', nn.ReLU(true)})
table.insert(model, {'drop6_3', nn.Dropout(0.500000)})
table.insert(model, {'torch_view', nn.View(-1):setNumInputDims(3)})
table.insert(model, {'encode1', nn.Linear(50176, 4096)})
table.insert(model, {'encode1neuron', nn.Sigmoid()})
table.insert(model, {'encode2', nn.Linear(4096, 1539)})
-- warning: module 'attr [type Data]' not found
-- warning: module 'loss [type SigmoidCrossEntropyLoss]' not found
return model